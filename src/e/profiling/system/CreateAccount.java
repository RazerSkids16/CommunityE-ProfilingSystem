/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package e.profiling.system;

import JpaImplementation.Accounts;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author PlonGaming
 */
public class CreateAccount extends javax.swing.JFrame {

    /**
     * Creates new form CreateAccount
     */
    public CreateAccount() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Community e-Profiling System");
        setIconImage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        fullnameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        conNumField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        posField = new javax.swing.JTextField();
        userField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        returnBtn = new javax.swing.JButton();
        clearField = new javax.swing.JButton();
        imgLabel = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        chooseBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        brgyHealthID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        gendBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        confPassField = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fullnameField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fullnameField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fullnameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fullnameFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fullnameFieldKeyTyped(evt);
            }
        });
        getContentPane().add(fullnameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 160, 230, 30));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Fullname");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Contact Number");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, -1, -1));

        conNumField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        conNumField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        conNumField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                conNumFieldKeyTyped(evt);
            }
        });
        getContentPane().add(conNumField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 230, 30));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Position");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, -1, -1));

        posField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        posField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        posField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                posFieldKeyReleased(evt);
            }
        });
        getContentPane().add(posField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 230, 30));

        userField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        userField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        userField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userFieldKeyReleased(evt);
            }
        });
        getContentPane().add(userField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 320, 230, 30));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Username");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, -1, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Password");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 370, -1, -1));

        passField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(passField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 230, 30));

        returnBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        returnBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Return_48px.png"))); // NOI18N
        returnBtn.setText("RETURN");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });
        getContentPane().add(returnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 450, 150, 43));

        clearField.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        clearField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Delete_48px.png"))); // NOI18N
        clearField.setText("CLEAR");
        clearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldActionPerformed(evt);
            }
        });
        getContentPane().add(clearField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 450, 140, 43));

        imgLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 180, 180));

        saveBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Save_48px.png"))); // NOI18N
        saveBtn.setText("SUBMIT");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        getContentPane().add(saveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 450, 150, 43));

        chooseBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        chooseBtn.setText("Choose file...");
        chooseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(chooseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 360, -1, 35));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Brgy. Health ID");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, -1, -1));

        brgyHealthID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        brgyHealthID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                brgyHealthIDKeyTyped(evt);
            }
        });
        getContentPane().add(brgyHealthID, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, 230, 30));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Gender");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, -1, 20));

        gendBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-SELECT-", "MALE", "FEMALE", "LGBTQ+" }));
        gendBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(gendBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 230, 30));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Confirm Password");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, -1, -1));

        confPassField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(confPassField, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, 230, 30));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/e/profiling/system/create.jpg"))); // NOI18N
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 810, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldActionPerformed
        setFieldsClear();
    }//GEN-LAST:event_clearFieldActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        Login log = new Login();
        int reply = JOptionPane.showConfirmDialog(null, "Do you want to discard this account?", "Community e-Profiling System",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (reply == JOptionPane.YES_OPTION) {
            dispose();
            log.setVisible(true);
        } else {

        }
    }//GEN-LAST:event_returnBtnActionPerformed

    private void chooseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseBtnActionPerformed
        getImage();
    }//GEN-LAST:event_chooseBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
//        addUser();
        String img = imgLabel.getText();
        int reply = JOptionPane.showConfirmDialog(null, "Continue to SAVE?", "Community e-Profiling System",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (reply == JOptionPane.YES_OPTION) {
            if (brgyHealthID.getText().isEmpty() || fullnameField.getText().isEmpty()|| conNumField.getText().isEmpty() || posField.getText().isEmpty() ||
                    userField.getText().isEmpty() || passField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "There are empty FIELDS!\nPlease fill them up before submitting!", "Warning!", JOptionPane.WARNING_MESSAGE);
            } else if (img.isEmpty()) {
                JOptionPane.showMessageDialog(null, "PLEASE ATTACH A PICTURE OF YOU.", "Community e-Profiling System", JOptionPane.WARNING_MESSAGE);
            } else {
                submitVersion2();
            }
        } else {

        }

    }//GEN-LAST:event_saveBtnActionPerformed

    private void fullnameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fullnameFieldKeyReleased
        fullnameField.setText(fullnameField.getText().toUpperCase());
    }//GEN-LAST:event_fullnameFieldKeyReleased

    private void posFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_posFieldKeyReleased
        posField.setText(posField.getText().toUpperCase());
    }//GEN-LAST:event_posFieldKeyReleased

    private void userFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_userFieldKeyReleased

    private void conNumFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conNumFieldKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_conNumFieldKeyTyped

    private void brgyHealthIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brgyHealthIDKeyTyped
        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_brgyHealthIDKeyTyped

    private void fullnameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fullnameFieldKeyTyped
        char a = evt.getKeyChar();
        
        if (Character.isDigit(a)){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_fullnameFieldKeyTyped

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CreateAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CreateAccount().setVisible(true);
//            }
//        });
//    }
    private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField brgyHealthID;
    private javax.swing.JButton chooseBtn;
    private javax.swing.JButton clearField;
    private javax.swing.JTextField conNumField;
    private javax.swing.JPasswordField confPassField;
    private javax.swing.JTextField fullnameField;
    private javax.swing.JComboBox<String> gendBox;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField passField;
    private javax.swing.JTextField posField;
    private javax.swing.JButton returnBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField userField;
    // End of variables declaration//GEN-END:variables

    public void setFieldsClear() {

        int reply = JOptionPane.showConfirmDialog(null, "Clear entry fields?", "Community e-Profiling System",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (reply == JOptionPane.YES_OPTION) {
            brgyHealthID.setText(null);
            fullnameField.setText(null);
            gendBox.setSelectedIndex(0);
            conNumField.setText(null);
            posField.setText(null);
            userField.setText(null);
            passField.setText(null);
            imgLabel.setIcon(null);
            imgLabel.setText(null);
        } else {

        }
    }

    public void getImage() {
        try {
            String filename = null;
            JFileChooser choose = new JFileChooser();
            choose.showOpenDialog(null);
            File f = choose.getSelectedFile();
            imgLabel.setIcon(new ImageIcon(f.toString()));
            filename = f.getAbsolutePath();
            imgLabel.setText(filename);

            try {
                File image = new File(filename);
                FileInputStream fis = new FileInputStream(image);
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                byte[] buf = new byte[1024];
                for (int readNum; (readNum = fis.read(buf)) != -1;) {
                    bos.write(buf, 0, readNum);
                }
                photo = bos.toByteArray();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } catch (Exception e) {

        }
    }

//    public void addUser() {
//        String fname = fnameField.getText();
//        String lname = lnameField.getText();
//        String conNum = conNumField.getText();
//        String pos = posField.getText();
//        String username = userField.getText();
//        String pass = passField.getText();
//
//        try {
//            String sql = "SELECT * from accounts WHERE firstname = \"" + fname + "\" and lastname = \"" + lname + "\" and username = \"" + username + "\" and password = \"" + pass + "\"";
//            ResultSet rs = Query(sql);
//
//            if (rs.next()) {
//                JOptionPane.showMessageDialog(null, "Account is already registered!", "WARNING!", JOptionPane.WARNING_MESSAGE);
//                fnameField.setText(null);
//                lnameField.setText(null);
//                conNumField.setText(null);
//                posField.setText(null);
//                userField.setText(null);
//                passField.setText(null);
//                fnameField.requestFocus();
//                return;
//            }
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//
//        try {
//            String sql1 = "SELECT * from accounts WHERE username = \"" + username + "\"";
//            ResultSet rs = Query(sql1);
//
//            if (rs.next()) {
//                JOptionPane.showMessageDialog(null, "Username already exists!", "WARNING!", JOptionPane.WARNING_MESSAGE);
//                userField.setText(null);
//                userField.requestFocus();
//                return;
//            }
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//
//        try {
//            String sql2 = String.format("INSERT INTO accounts VALUES (NULL, \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\");", fname, lname, conNum, pos, username, pass);
//            Query(sql2, true);
//            storeImage();
//            JOptionPane.showMessageDialog(null, "Account Successfully registered!", "Community e-Profiling System", JOptionPane.INFORMATION_MESSAGE);
//            Login log = new Login();
//            dispose();
//            log.setVisible(true);
//        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
//
//    }
//
//    public void storeImage() {
//        EntityManagerFactory emf = Persistence.createEntityManagerFactory("e-Profiling_SystemPU");
//        EntityManager em = emf.createEntityManager();
//        em.getTransaction().begin();
//        Accounts acc = new Accounts();
//        try {
//            acc.setImage(photo);
//
//            em.persist(acc);
//            em.getTransaction().commit();
//
//            imgLabel.setText(null);
//            imgLabel.setIcon(null);
//        } catch (Exception e) {
//        } finally {
//            em.close();
//            emf.close();
//        }
//    }
    public void submitVersion2() {
        int healthID = new Integer(brgyHealthID.getText());
        String fullname = fullnameField.getText();
        String gender = gendBox.getSelectedItem().toString();
        String conNum = conNumField.getText();
        String pos = posField.getText();
        String username = userField.getText();
        String pass = passField.getText();
        String password = String.valueOf(passField.getPassword());
        String confirmPassword = String.valueOf(confPassField.getPassword());

        if (brgyHealthID.getText().isEmpty() || fullname.isEmpty() || conNum.isEmpty() || pos.isEmpty() || username.isEmpty() || pass.isEmpty()) {
            JOptionPane.showMessageDialog(null, "There are empty FIELDS!\nPlease fill them up before submitting!", "Warning!", JOptionPane.WARNING_MESSAGE);

            brgyHealthID.setText(null);
            fullnameField.setText(null);
            gendBox.setSelectedIndex(0);
            conNumField.setText(null);
            posField.setText(null);
            userField.setText(null);
            passField.setText(null);
            brgyHealthID.requestFocus();
        } else if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(null, "PASSWORD DO NOT MATCH!", "INVALID", JOptionPane.ERROR_MESSAGE);
            passField.setText(null);
            confPassField.setText(null);
            passField.requestFocus();
        } else {
            try {
                String sql = "SELECT * from accounts WHERE acc_BrgyHealthID =\"" + healthID + "\" and acc_fullname = \"" + fullname + "\" and acc_username = \"" + username + "\" and acc_password = \"" + pass + "\"";
                ResultSet rs = Query(sql);

                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "Account is already registered!", "WARNING!", JOptionPane.WARNING_MESSAGE);
                    brgyHealthID.setText(null);
                    fullnameField.setText(null);
                    gendBox.setSelectedIndex(0);
                    conNumField.setText(null);
                    posField.setText(null);
                    userField.setText(null);
                    passField.setText(null);
                    brgyHealthID.requestFocus();
                    return;
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

            try {
                String sql1 = "SELECT * from accounts WHERE acc_username = \"" + username + "\"";
                ResultSet rs = Query(sql1);

                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "Username already exists!", "WARNING!", JOptionPane.WARNING_MESSAGE);
                    userField.setText(null);
                    userField.requestFocus();
                    return;
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

            try {
                EntityManagerFactory emf = Persistence.createEntityManagerFactory("e-Profiling_SystemPU");
                EntityManager em = emf.createEntityManager();
                em.getTransaction().begin();
                Accounts acc = new Accounts();

                try {
                    acc.setAccBrgyHealthID(healthID);
                    acc.setAccFullname(fullname);
                    acc.setAccGender(gender);
                    acc.setAccContactNum(conNum);
                    acc.setAccPosition(pos);
                    acc.setAccUsername(username);
                    acc.setAccPassword(pass);
                    acc.setAccImage(photo);

                    em.persist(acc);
                    em.getTransaction().commit();
                    JOptionPane.showMessageDialog(null, "Account Successfully registered!", "Community e-Profiling System", JOptionPane.INFORMATION_MESSAGE);
                    Login log = new Login();
                    dispose();
                    log.setVisible(true);
                } catch (Exception e) {
                } finally {
                    em.close();
                    emf.close();
                }
            } catch (Exception e) {
            }
        }
    }

    public static Connection Connect() throws SQLException {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://localhost:3306/rcceps", "root", "");
            Statement st = connect.createStatement();
            return connect;
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        System.out.println("Can't Connect To Server");
        return null;
    }

    public static ResultSet Query(String query, boolean isUpdate) throws SQLException {
        Statement stmnt = Connect().createStatement();
        System.out.println("Running all queries: " + query);
        if (isUpdate) {
            stmnt.executeUpdate(query);
        } else {
            return stmnt.executeQuery(query);
        }
        stmnt.close();

        return null;

    }

    public static ResultSet Query(String query) throws SQLException {
        return Query(query, false);
    }

    byte[] photo = null;
}
